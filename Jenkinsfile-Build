pipeline {
    agent {label 'docker'}

    tools {
        // Install Maven
        maven 'maven-3.9.2'
    }

    environment {
        // CI repo dir name
        CI_REPO="CI-REPOSITORY"
        // releases repo URL
        NEXUS_RELEASES=credentials('nexus-mvn-releases')
        // snapshots repo URL
        NEXUS_SNAPSHOTS=credentials('nexus-mvn-snapshots')
        // nexus docker registry
        DOCKER_SNAPSHOTS=credentials('docker-snapshots')
        // NEXUS_USER_USR NEXUS_USER_PSW
        NEXUS_USER=credentials('nexus-user')
        // nexus maven central repo
        NEXUS_CENTRAL=credentials('nexus-mvn-central')
        // nexus URL (host:port)
        NEXUS_URL=credentials('nexus-url')
    }

    options { 
        skipDefaultCheckout() 
    }

    stages {
        stage('Checkout SCM') {
            steps {
                // checkout app repo
                checkout scm
                // checkout CI repo to <workdir>/"${env.CI_REPO_DIR}"
                checkout scmGit(
                    branches: [[name: 'main']], 
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${env.CI_REPO}"]], 
                    // CI repo URL from var set by emote Jenkinsfile Provider plugin
                    userRemoteConfigs: [[url: "${env.RJPP_SCM_URL}"]]
                )
                // read pom.xml
                script {
                    def pom = readMavenPom()
                    env.APP_NAME = pom.getName()
                    env.APP_ID = pom.getArtifactId()
                    env.GROUP_ID = pom.getGroupId()
                    env.VERSION = pom.getVersion()
                    // set custom build name
                    currentBuild.displayName = "#" + currentBuild.number + " ${env.VERSION}"
                }
            }
        }
        stage('Mvn deploy to nexus') {
            steps {
                lock('maven') {
                    echo "Building..."
                    sh "mvn --batch-mode -s ${env.CI_REPO}/mvn-settings.xml clean deploy"
                }
            }
        }
        stage('Build container') {
            steps {
                script{
                    docker.withRegistry("https://${DOCKER_SNAPSHOTS}", 'nexus-user') {
                        def myImage = docker.build("${env.APP_NAME}:${env.VERSION}", "--build-arg jarfile=target/${env.APP_ID}-${env.VERSION}.jar -f ${env.CI_REPO}/Dockerfile ./")
                        myImage.push()
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }   
    }
}
