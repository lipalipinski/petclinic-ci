/* 
expects Dockerfile to contenerize the app
expects mvn-settings.xml for nexus repo setup
*/

pipeline {
    agent {label 'docker'}

    tools {
        // Install Maven
        maven 'maven-3.9.1'
    }

    environment {
        // releases repo URL
        NEXUS_RELEASES=credentials('nexus-mvn-releases')
        // snapshots repo URL
        NEXUS_SNAPSHOTS=credentials('nexus-mvn-snapshots')
        // central proxy repo URL
        NEXUS_CENTRAL=credentials('nexus-mvn-central')
        // NEXUS_ADMIN_USR NEXUS_ADMIN_PSW
        NEXUS_ADMIN=credentials('nexus-admin')
        // nexus docker registry
        NEXUS_DOCKER_SNAPS=credentials('docker-reg-url-snaps')
    }

    stages {
        stage('clone CI repo') {
            steps {
                // clone CI repo to <workdir>/CI-REPO
                checkout scmGit(
                    branches: [[name: 'main']], 
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'CI-REPO']], 
                    // CI repo URL from var set by emote Jenkinsfile Provider plugin
                    userRemoteConfigs: [[url: "${env.RJPP_SCM_URL}"]]
                )
            }
        }
        stage('deploy') {
            steps {
                echo "Building..."
                sh "mvn -Dmaven.test.failure.ignore=true --batch-mode -s CI-REPO/mvn-settings.xml clean deploy"
            }
        }
        stage('Build container') {
            steps {
                script{
                    def pom = readMavenPom()
                    env.APP_ID = pom.getArtifactId()
                    env.GROUP_ID = pom.getGroupId()
                    env.VERSION = pom.getVersion()
                    env.IMG_NAME = "${env.APP_ID}:${env.VERSION}"
                    docker.withRegistry("https://${NEXUS_DOCKER_SNAPS}", 'nexus-admin') {
                        def myImage = docker.build("${env.IMG_NAME}")
                        myImage.push()
                    }
                }
            }
        }
    }
}
